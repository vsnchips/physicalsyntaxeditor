/*   Ideation Rant
	-The drawer walks from the focus, and draws the tree, iterating until functionality is blackboxed by focus rules, like running out of room.
	-Actually, recursion is an inappropriate principle here, because nothing is drawn without respect to its place within the user's view,
	posture, and interaction state.

	An ast gets rendered as a div.
	There must be a significance for user discrimination between different blocks of code, different views of the same code, and different views of different code.
	Its confusing to say, but it might be less confusing to see.

	In 3d modelilng packages, its apparent that there are three orthogonal views and a perspective view.
	Could a similar scheme work for code?

	Concurrent views are a prerequisite for juxtaposition.
	Things which the user may need to juxtapose:
	-Declarations of things
	-Documentation, function prototypes.
	-Search results.

	Expanded code folds are a form of juxtaposition.
	Sometimes, for loops may be nested.
	It is absolutely normal to juxtapose nested strctures against declarations several levels higher than the working block.
	It would be silly for this to open a new view. Sometimes these structures are only a few lines.
	What is the distinguishing principle?
	Avoid premature abstraction.

	Perhaps, by default, things on the ast are inlined. until a block statement begins?
	Formatting: 'newlined' blockStatements may need to be nudged over to the left. 
	Sometimes the user's sense of content chunking will differ to the ast.
	
	Can divs be on the same line? - no need. use spans.

	-The tree only represents the code within a line.
	Call expressions encapsulate by default.

	-Users may want to promote literals to parameters via code transformation.
	-The literal should be copied to every call as an argument, which can then be manipulated via hotcode injection. TODO: does this make sense?

	When you want to click through to mutate an encapsulated thing, you are changing the master copy.
	There may be an operation added to promote a literal or a variable to an adhoc parameter, with a default argument.
*/


//Dragging, previews

// If the parent captures a mouse click, how might a user indicate moving an element within a
// movable parent?
// If the user can see it, I want them to be able to interact with it.
// If the user dives into something, maybe the thing can be popped up to the
// juxtaposing scope.
//
// If the user discovers something during a chord, a focus marker should be set so they
// can jump to it in rest mode immediately after releasing the chord.
//
// So like, play a chord, then jump into it.
//
